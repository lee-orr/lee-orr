---
import { getCollection } from "astro:content";
import Shell from "../components/shell.astro";

import Html from "../components/html.astro";
import { storytelling } from "../data/site-nav-data.json";
import { generate_shape } from "./generate_shape";
const { socials, nav } = storytelling;

const demos: {
  title: string;
  audio?: string;
  icon: string;
  color: string;
  shape: string;
  links?: { [key: string]: string };
}[] = [
  {
    title: "Animation Voice Demo",
    audio: "demo_files/Lee-Orr Animation Demo.mp3",
    icon: "icofont-video-alt",
    color: "var(--category-7)",
    shape: generate_shape(),
  },
  {
    title: "Acting Resume",
    links: {
      actor: "Resume With Headshot",
      actor_without_headshot: "Resume Without Headshot",
    },
    icon: "icofont-video",
    color: "var(--category-5)",
    shape: generate_shape(),
  },
  {
    title: "Commercial Voice Demo",
    audio: "demo_files/Lee-Orr Commercial Demo.mp3",
    icon: "icofont-radio-mic",
    color: "var(--category-1)",
    shape: generate_shape(),
  },
  {
    title: "Headshots",
    links: {
      headshots: "my Headshots",
    },
    icon: "icofont-photo",
    color: "rgb(160, 5, 108)",
    shape: generate_shape(),
  },
];
---


<Html>
  <Shell area="storytelling" socials={socials} nav={nav}>
    {
      demos.map(({ title, audio, icon, color, shape, links }) => {
        let style = `clip-path: ${shape};`;
        let class_string = `flex-col m-[3%] p-5 flex gap-5 col-span-2 row-span-2`;
        let bg = `background-color: var(--color-panel-bg);`;
        return (
          <div class={class_string} style={style}>
            <div
              class="fixed w-screen h-screen top-0 left-0 right-0 bottom-0 z-[-10] pointer-events-none"
              style={bg}
            />
            <h2 class="text-2xl text-main-txt font-bold flex flex-row justify-between items-center">
              <>
                <span class="underline-offset-8 underline">{title}</span>
                <span class="flex flex-row justify-end gap-1 items-center">
                  <span class="rounded-full flex flex-row justify-center items-center">
                    <i class={icon} />
                  </span>
                </span>
              </>
            </h2>
            <div class="p-2 flex-col flex gap-2">
              {audio ? (
                <audio
                  controls
                  class="bg-accent rounded-full text-main-txt border-solid border-accent border-2 focus:border-accent-hover"
                >
                  <source src={audio} type="audio/mpeg" />
                </audio>
              ) : (
                ""
              )}
              {links
                ? Object.keys(links).map((link) => (
                    <a
                      class="fake-audio rounded-full text-white p-3 text-sm border-solid border-accent border-2 flex justify-center items-center hover:text-accent font-bold"
                      target="_blank"
                      href={link}
                    >
                      View {links[link]}
                    </a>
                  ))
                : ""}
            </div>
          </div>
        );
      })
    }
  </Shell>

  <style>
    body {
      --content-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
      --content-template-gap: 1.2rem;
    }
    .timeline-item {
      padding: 1rem;
      position: relative;
    }
    .fake-audio {
      position: relative;
      
     background-color: #17313A;
    }
  </style>
</Html>
