---
import { getCollection } from "astro:content";
import Shell from "../components/shell.astro";
import Html from "../components/html.astro";

import { storytelling, link_types } from "../data/site-nav-data.json";
import { generate_shape } from "./generate_shape";
import { generate_storytelling_filters } from "./generate_filters";
const { socials, nav } = storytelling;

const link_icons: {[key: string]: string | undefined} = link_types;

const timeline = await Promise.all((await getCollection("storytelling-timeline")).map((v) => ({
  ...v,
  data: {
    ...v.data,
    tags: v.data.tags.split(/(\s|",")+/g).map((v) => v.trim()).filter((v) => v.length > 0)
  }
})).map((v) => {
      const render = async () => {
        return {
          ...v,
          rendered: await v.render(),
        };
      };
      return render();
    }));
  
timeline.sort((a,b) => b.data.date > a.data.date ? 1 : -1);


const get_next_random = () => {
  let random = Math.random();
  let size_index = random < 0.5 ? 0 : random < 0.75 ? 1 : 2;
  let offset_x = Math.random() * 1.8 - 0.9;
  let offset_y = Math.random() * 1.8 - 0.9;

  return [size_index, offset_x, offset_y];
}

const tags : { [key: string]: number }= {};

for (let item of timeline) {
  for (let tag of item.data.tags) {
    let t = tag.trim();
    if (tags[t]) {
    tags[t]++;
    } else {
      tags[t] = 1;
    }
  }
}

const tags_ordered = Object.keys(tags).map((v) => ({ tag: v, count: tags[v] ?? 0}));
tags_ordered.sort((a,b) => b.count - a.count);

const tag_icons: {[key: string]: string} = {
  acting: 'icofont-video',
  singing: 'icofont-radio-mic',
  "3d": 'icofont-cube',
  writing: 'icofont-fountain-pen',
  theatre: 'icofont-street-view',
  games: 'icofont-game-pad',
  animation: 'icofont-video-alt'
};

const tag_colors: {[key: string]: string} = {
  acting: 'var(--category-1)',
  singing: 'var(--category-2)',
  "3d": 'var(--category-3)',
  writing: 'var(--category-4)',
  theatre: 'var(--category-5)',
  games: 'var(--category-6)',
  animation: 'var(--category-7)'
};

---


<Html>
  <Shell area="storytelling" socials={socials} nav={nav}>
    <ol class="timeline">
          {
            timeline.map(({ slug, data, rendered }, index) => {
              let [size, offset_x, offset_y] = get_next_random();

              let shape = generate_shape();
              let style = `clip-path: ${shape}; position: relative; top: ${offset_y}rem; left: ${offset_x}rem;`;

              let container_class = `timeline-item ${data.tags.map((v) => v.trim()).map((v) => `tag-${v}`).join(" ")}`;

              let img = data.image ? (<div class="w-full h-[30vh] flex flex-row justify-center items-center"><div class="flex-shrink flex-grow max-w-full h-full aspect-square bg-center bg-cover" style={`background-image: url(${data.image});`}/></div>) : (<></>);

              let bg =data.dialogue_bg || data.image;

              let imgbg = bg ? `background-image: url(${bg});` : ``;

              const { Content } = rendered;

              return (
                <li class={container_class} transition:name={`timeline-${slug}`}>
                  <div style={style}>
                    <div class="bg" />
                    <h2><a href={`/storytelling/${slug}`}>{data.title}</a></h2>
                    <h3>
                      <time datetime={data.date.toDateString()} aria-label="from">{data.date.toLocaleDateString('default', { month: "short", year: 'numeric' })}</time>
                    </h3>
                    <ul aria-label="area" class="tags">
                      {
                        data.tags.map((tag) => <li style={`background-color: ${tag_colors[tag] ?? "#000"};`}>{tag_icons[tag] ? <><i class={tag_icons[tag]}/>&nbsp;</> : ""}{tag}</li>)
                      }
                    </ul>
                    {
                      data.image ? 
                      <div class="image"><img src={data.image} alt={data.image_alt}/></div>
                      : <></>
                    }
                    <p>{data.summary}</p>
                    
            {
              data.links ? (<ul class="links" aria-label="links">{
                Object.keys(data.links).map((type) => {
                  let target = data.links && data.links[type];
                  if (!target) {
                    return <></>
                  }
                  let icon = link_icons[type];
                  let icon_element = icon ? <><i class={icon} /> &nbsp;</> : <></>;
                  return <a href={target}>{icon_element}{target}</a>;
                })}</ul>
              ) : <></>
            }
                  </div>
                </li>
              );
            })
          }
          </ol>
    <div slot="filters"  transition:name={`filter-content`}>
      {
        tags_ordered.map(({ tag}) => (<button id={"button-" + tag} class={ `tag-button tag-${tag}` } style={`background-color: ${tag_colors[tag] ?? "#000"};`}>{tag_icons[tag] ? <i class={tag_icons[tag]}/> : ""} {tag}</button>))
      }
    </div>
    
    <Fragment set:html={
      generate_storytelling_filters(tags_ordered.map(({tag}) => tag))
    }/>
  </Shell>
</Html>

<style>

.timeline {
    display: grid;
    gap: 0.3rem;
    grid-template-columns: repeat(auto-fill, 
      0.5rem
      2rem
      16rem
      1rem
      0.5rem
    );
    grid-auto-rows: 
    0.5rem
    1rem
    fit-content(1.2em)
    minmax(0, max-content)
    fit-content(4em)
    fit-content(1.2em)
    fit-content(3em)
    fit-content(5em)
    1rem
    0.5rem;
    justify-content: center;
  }

  .timeline-item {
    display: grid;
    grid-column: span 5;
    grid-row: span 10;
    position: relative;
    overflow: hidden;



    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-template-areas: ". . . . ."
    ". card card card ."
    ". card card card ."
    ". card card card ."
    ". card card card ."

    ". card card card ."
    ". card card card ."
    ". card card card ."
    ". card card card ."
    ". . . . .";
      

    & > div {
      display: grid;
      grid-template-columns: subgrid;
      grid-template-rows: subgrid;
      grid-template-areas: ". . ."
      ". tags ."
      "image image image"
      ". title ."
      ". date ."
      ". content ."
      ". links . "
      ". . .";

      grid-area: card;

      h2 {
        font-size: 1.1em;
        grid-area: title;
        position: relative;
        z-index: 1;
        text-align: center;
        align-self: start;
        justify-self: center;
      }

      h3 {
        grid-area: date;
        text-align: center;
        font-size: 0.65em;
      }

      .tags {
        grid-area: tags;
        text-align: center;

        li {
          display: inline-block;
          font-size: 0.6em;
          margin: 0.1em;
          padding: 0.25em;
          border-radius: 0.5em;
          height: 2em;
        }
      }

      p {
        grid-area: content;
        font-size: 0.7em;
      }

      .links {
        grid-area: links;
        font-size: 0.7em;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: flex-start;
      }

      .image {
        grid-area: image;
        position: relative;
        z-index: 0;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        scale: 1.03;
        margin-top: 0.2em;
        margin-bottom: 0.2em;

        img {
          max-height: 100%;
        }
      }

      .bg {
        z-index: -1;
        background-color: var(--color-panel-bg);
        width: 100lvw;
        height: 100lvh;
      }
    }
  }


  @media (max-width: 700px) {
    .timeline {
    grid-template-columns: 
      0.5rem
      2rem
      fit-content(20em)
      1rem
      0.5rem;
    }
  }
  
</style>


<script>
  import setup_page from "../setup_page";
  setup_page();

  document.addEventListener('astro:after-swap', setup_page);
</script>