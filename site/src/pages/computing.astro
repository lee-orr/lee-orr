---
import { getCollection } from "astro:content";
import slugify from "slugify";
import Shell from "../components/shell.astro";
import Html from "../components/html.astro";

import { computing } from "../data/site-nav-data.json";
const { socials, nav } = computing;
import { generate_computing_filters } from "./generate_filters";
import AnimatedBackdrop from "../components/animated-backdrop.astro";

slugify.extend({ "/": "-", "\\": "-" });

const timeline = await Promise.all(
  (
    await getCollection("computing-timeline")
  )
    .map((v) => ({
      ...v,
      data: {
        ...v.data,
        tags: v.data.tags
          .split(/(\s|",")+/g)
          .map((v) => v.trim())
          .map((v) => slugify(v, { lower: true, strict: true }))
          .filter((v) => v.length > 0),
      },
    }))
    .map((v) => {
      const render = async () => {
        return {
          ...v,
          rendered: await v.render(),
        };
      };
      return render();
    })
);

timeline.sort((a, b) => {
  let a_date = a.data.end_date ?? new Date();
  let b_date = b.data.end_date ?? new Date();
  return b_date > a_date ? 1 : -1;
});

const tags: { [key: string]: number } = {};

for (let item of timeline) {
  for (let tag of item.data.tags) {
    let t = tag.trim();
    if (tags[t]) {
      tags[t]++;
    } else {
      tags[t] = 1;
    }
  }
}
let divided = timeline.length / 3;
let gaps = [];
for (let i = 1; i < divided; i += 2) {
  gaps.push(i);
}

const tags_ordered = Object.keys(tags).map((v) => ({
  tag: v,
  count: tags[v] ?? 0,
}));
tags_ordered.sort((a, b) => b.count - a.count);

const tag_icons: { [key: string]: string } = {};
const tag_colors: { [key: string]: string } = {};

const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];
---

<Html>

  <Shell area="computing" socials={socials} nav={nav}>
    {
      timeline.map(({ slug, data, body, rendered }, index) => {
        let class_string = `timeline-item bg-panel-bg flex-col overflow-y-auto p-5 h-[25vh] flex gap-3 timeline-item col-span-2 ${data.tags
          .map((v) => v.trim())
          .map((v) => `tag-${v}`)
          .join(" ")}`;

        let title =
          data.info.project || data.info.role + " at " + data.info.company;

        let context =
          data.info.project !== undefined
            ? "Project"
            : data.info.is_contract
            ? "Contract"
            : "Job";

        const { Content } = rendered;

        return (
          <>
            <div class={class_string}>
              <h3 class="text-xs text-main-txt text-center justify-between items-center gap-3 flex flex-row">
                <span>
                  {months[data.start_date.getMonth()]},{" "}
                  {data.start_date.getFullYear()} -{" "}
                  {data.end_date
                    ? months[data.end_date.getMonth()] +
                      ", " +
                      data.end_date.getFullYear()
                    : "present"}
                </span>

                {data.github ? (
                  <a
                    class="text-sm flex items-center flex-row justify-center hover:text-hover-txt"
                    href={data.github}
                    target="_blank"
                  >
                    <i class="icofont-github" />
                  </a>
                ) : (
                  <span />
                )}
              </h3>
              <h2 class="text-2xl text-main-txt font-bold flex flex-row justify-center items-center">
                <button
                  class="underline-offset-8 text-center hover:underline timeline-item-button hover:text-hover-txt"
                  id={`item-${index}`}
                >
                  {title}
                </button>
              </h2>
              <h3 class="text-xs text-off-text flex flex-row justify-center items-center">
                {context}
              </h3>

              <span class="flex flex-row justify-center gap-1 items-center flex-wrap">
                {data.tags.map((tag) => (
                  <span
                    class="text-[0.65rem] rounded-full flex flex-row justify-center items-center p-[0.05rem] pr-2 pl-2 text-main-txt"
                    style={`background-color: ${
                      tag_colors[tag] ?? "var(--color-accent)"
                    };`}
                  >
                    {tag_icons[tag] ? <i class={tag_icons[tag]} /> : tag}
                  </span>
                ))}
              </span>
              <div class="text-sm text-center text-off-text">
                {data.summary}
              </div>

              <dialog
                class="timeline-item-dialog bg-panel-bg p-0"
                id={`dialog-${index}`}
              >
                <div class="relative p-10 w-full h-full flex flex-col gap-2">
                  <div class="flex flex-row justify-between items-center pb-2">
                    <h1 class="text-2xl text-main-txt font-bold flex flex-row justify-start items-center">
                      {title}
                    </h1>
                    <form class="flex justify-center items-center">
                      <button
                        formmethod="dialog"
                        class="rounded-full flex justify-center items-center bg-accent  w-5 h-5 text-center text-main-txt hover:bg-accent-hover"
                      >
                        X
                      </button>
                    </form>
                  </div>
                  <h3 class="text-xs text-off-text text-center flex flex-row justify-between items-center gap-3">
                    <span>
                      {months[data.start_date.getMonth()]},{" "}
                      {data.start_date.getFullYear()} -{" "}
                      {data.end_date
                        ? months[data.end_date.getMonth()] +
                          ", " +
                          data.end_date.getFullYear()
                        : "present"}
                    </span>
                    {data.github ? (
                      <a
                        class="text-sm flex items-center flex-row gap-1 justify-center hover:text-hover-txt"
                        href={data.github}
                        target="_blank"
                      >
                        <span>{data.github}</span>
                        <i class="icofont-github" />
                      </a>
                    ) : (
                      ""
                    )}
                  </h3>
                  <div class="prose prose-content text-main-txt">
                    <Content />
                  </div>
                  <span class="flex flex-row justify-center gap-1 items-center flex-wrap">
                    {data.tags.map((tag) => (
                      <span
                        class="text-[0.65rem] rounded-full flex flex-row justify-center items-center p-[0.05rem] pr-2 pl-2 text-main-txt"
                        style={`background-color: ${
                          tag_colors[tag] ?? "var(--color-accent)"
                        };`}
                      >
                        {tag_icons[tag] ? <i class={tag_icons[tag]} /> : tag}
                      </span>
                    ))}
                  </span>
                </div>
              </dialog>
            </div>
          </>
        );
      })
    }
    <div slot="filters" class="text-main-txt">
      {
        tags_ordered.map(({ tag }) => (
          <button
            id={"button-" + tag}
            class={`p-2 rounded-full hover:underline tag-button tag-${tag} text-main-txt`}
            style={`background-color: ${
              tag_colors[tag] ?? "var(--color-accent)"
            };`}
          >
            {tag_icons[tag] ? <i class={tag_icons[tag]} /> : ""} {tag}
          </button>
        ))
      }
    </div>

    <Fragment
      set:html={generate_computing_filters(tags_ordered.map(({ tag }) => tag))}
    />
  </Shell>

  <script src="../setup_page.ts"></script>
</Html>

<style>
  body {
    --content-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
    --content-template-gap: 0.5rem;
  }
</style>
