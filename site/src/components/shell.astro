---
import AnimatedBackdrop from "./animated-backdrop.astro";

const { area, socials, nav } = Astro.props as {
  area: "storytelling" | "computing";
  socials: Array<{ type: string; value: string; icon: string }>;
  nav: Array<{
    name: string;
    url: string;
    new_tab?: boolean;
  }>;
};

function process_nav(
  input: { name: string; url: string; new_tab?: boolean }[]
): { name: string; url: string; new_tab?: boolean; is_active: boolean }[] {
  let path = Astro.url.pathname.substring(1);
  return input.map((v) => {
    return { ...v, is_active: path == v.url };
  });
}

let navigation = process_nav(nav);
---

<body class={area}>
    <header class="">
      <a class="" href={area}><h2>Lee-Orr</h2></a>
    </header>

    <nav class="">
      <span>
      <a href="/">
        <div class="logo"></div>
      </a>

      {
        socials.map(({ value, icon }) => (
          <a
            class=""
            target="_blank"
            href={value}
          >
            <i class={icon} />
          </a>
        ))
      }</span>
    <span class="">
      {
        navigation.map(({ is_active, name, url, new_tab }) => (
          <a
            class={
              (is_active
                ? ""
                : "") + ""
            }
            target={new_tab ? "_blank" : ""}
            href={url}
          >
            {name}
          </a>
        ))
      }
    </span>

  </nav>
    <div class={"body " + (Astro.slots.has("filters") ? "nav" : "")}>
      <!--AnimatedBackdrop area={area} /-->
      <div class="">
        <div class="c">
          <slot />
        </div>
      </div>
      <details class="">
        <summary class="">
          Filters
        </summary>
        <slot name="filters" />
      </details>
    </div>
</body>

<style>
  body {
    width: 100dvw;
    height: 100dvh;
    background-color: var(--color-main-bg);
    display: grid;
    grid-template-columns: [page-start] 1em [content-start] repeat(auto-fill, minmax(10em, 1fr)) [content-end] 1em [page-end];
    grid-template-rows: [page-start] 1em [nav-start] 2em [nav-end header-start] 5em [header-end content-start] repeat(auto-fill, minmax(10rem, 1fr)) [content-end page-end];
  }

  header {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-row: header;
    grid-column: page;

    background-color: var(--color-panel-bg);

    a {
      grid-column: content;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }
  }

  nav {
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    grid-row-start: page-start;
    grid-row-end: nav-end;
    grid-column: page;
    background-color: var(--color-panel-bg);

    & span {
      grid-row: nav;
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: 2rem;

      & > a {
        width: 1px;
        flex-grow: 1;
        flex-shrink: 0;
      }
    }
    
    & span:first-of-type {
      grid-column: 2;
      justify-content: flex-start;
    }

    & span:last-of-type {
      grid-column-end: -2;
      justify-content: flex-end;
    }
  }

  .logo {
    aspect-ratio: 1 / 1;
    background: url(website-logo.png); 
    background-size: contain;
    background-position: center;  
  }
</style>
