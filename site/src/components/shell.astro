---
import AnimatedBackdrop from "./animated-backdrop.astro";

const { area, socials, nav } = Astro.props as {
  area: "storytelling" | "computing";
  socials: Array<{ type: string; value: string; icon: string }>;
  nav: Array<{
    name: string;
    url: string;
    new_tab?: boolean;
  }>;
};

function process_nav(
  input: { name: string; url: string; new_tab?: boolean }[],
): { name: string; url: string; new_tab?: boolean; is_active: boolean }[] {
  let path = Astro.url.pathname.substring(1);
  return input.map((v) => {
    return { ...v, is_active: path == v.url };
  });
}

let navigation = process_nav(nav);
---

<body class={area}>
  <div class="shell-root bg-background">
    <div class="header bg-primary-700">
      <span class="links">
        <a href="/">
          <img src="/Website Logo.png" class="h-10 aspect-1/1" />
        </a>

        {
          socials.map(({ value, icon }) => (
            <a
              class="text-text-100 text-xl hover:text-secondary-200"
              target="_blank"
              href={value}
            >
              <i class={icon} />
            </a>
          ))
        }
      </span>
      <a class="text-white text-3xl title" href={area}>Lee-Orr</a>
      <span class="navigation text-white text-xl">
        {
          navigation.map(({ is_active, name, url, new_tab }) => (
            <a
              class={
                (is_active
                  ? "pointer-events-none text-secondary-200 font-bold underline"
                  : "") + " hover:text-secondary-200"
              }
              target={new_tab ? "_blank" : ""}
              href={url}
            >
              {name}
            </a>
          ))
        }
      </span>
    </div>
    <div class="body">
      <AnimatedBackdrop area={area} />
      <div class="content">
        <slot />
      </div>
      <div class="tags bg-primary-800">
        <slot name="filters" />
      </div>
    </div>
  </div>
</body>

<style>
  .shell-root {
    width: 100dvw;
    height: 100dvh;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: minmax(min-content, 1fr) minmax(30rem, 100fr);
    justify-content: center;
    position: relative;
    container-type: inline-size;
  }

  .header {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
    padding: 1rem;
    container-type: inline-size;
  }

  .navigation {
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    align-items: center;
    gap: 1rem;
    @container (max-width: 29.999rem) {
      grid-column: span 2;
      width: 100%;
      justify-content: space-between;
    }
  }

  .title {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    @container (max-width: 29.999rem) {
      justify-content: flex-start;
      padding-left: 0.5rem;
    }
  }

  .links {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
    gap: 1rem;
    @container (max-width: 29.999rem) {
      justify-content: flex-end;
      grid-column: span 1;
      padding-right: 0.5rem;
    }
  }

  .body {
    flex-grow: 1;
    position: relative;
    display: grid;
    grid-template-columns: minmax(10rem, 1fr) minmax(20rem, 5fr);
    grid-template-rows: 1fr;
    grid-template-areas: "nav content";
    flex-direction: row-reverse;
    justify-content: center;
    flex-wrap: wrap-reverse;
    align-items: stretch;
    padding: 1rem;
    gap: 1rem;

    grid-auto-flow: dense;

    @container (max-width: 39.9999rem) {
      background: green !important;
      grid-template-columns: 1fr;
      grid-template-rows: minmax(10rem, min-content) minmax(20rem, 3fr);
      grid-template-areas: "nav" "content";
    }
  }

  .tags {
    z-index: 10;
    padding: 1rem;
    overflow-y: auto;
    display: flex;
    grid-area: nav;
    flex-direction: row;
    justify-content: flex-start;
    align-items: flex-start;

    > div {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      align-items: center;
      justify-content: flex-start;
      gap: 0.3rem;
    }
  }

  .content {
    z-index: 10;
    grid-area: content;

    display: grid;

    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
    gap: 0.5rem;

    overflow-y: auto;
  }
</style>
