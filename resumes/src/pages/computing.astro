---
import { getCollection } from "astro:content";
import slugify from "slugify";
import Shell from "../components/shell.astro";

import { computing } from "../data/site-nav-data.json";
const { socials, nav } = computing;
import { generate_filters } from "./generate_filters";

slugify.extend({'/': '-', '\\': '-'});

const timeline = (await getCollection("computing-timeline")).map((v) => ({
  ...v,
  data: {
    ...v.data,
    tags: v.data.tags
      .split(/(\s|",")+/g)
      .map((v) => v.trim())
      .map((v) => slugify(v, { lower: true, strict: true}))
      .filter((v) => v.length > 0),
  },
}));
timeline.sort((a, b) => {
  let a_date = a.data.end_date ?? new Date();
  let b_date = b.data.end_date ?? new Date();
  return (b_date > a_date ? 1 : -1);
});

const tags: { [key: string]: number } = {};

for (let item of timeline) {
  for (let tag of item.data.tags) {
    let t = tag.trim();
    if (tags[t]) {
      tags[t]++;
    } else {
      tags[t] = 1;
    }
  }
}

const tags_ordered = Object.keys(tags).map((v) => ({
  tag: v,
  count: tags[v] ?? 0,
}));
tags_ordered.sort((a, b) => b.count - a.count);

const tag_icons: { [key: string]: string } = {};
const tag_colors: { [key: string]: string } = {};

const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <link rel="stylesheet" href="/styles.css" />
    <link rel="stylesheet" href="icofont.min.css" />
    <title>Lee-Orr</title>
  </head>

  <Shell area="computing" socials={socials} nav={nav}>
    <div class="w-screen h-full relative">
      <div
        class="absolute top-0 left-0 bottom-0 right-0 overflow-y-auto overflow-x-hidden"
      >
        <div
          class="grid grid-cols-7 justify-start items-start gap-3 w-full p-10"
        >
          {
            timeline.map(({ slug, data }, index) => {
              let class_string = `bg-primary-800 flex-col overflow-y-auto p-5 h-[25vh] flex gap-3 timeline-item col-span-2 ${data.tags
                .map((v) => v.trim())
                .map((v) => `tag-${v}`)
                .join(" ")}`;

              let title =
                data.info.project ||
                data.info.role + " at " + data.info.company;

              return (
                <>
                  {index % 6 === 3 ? <div class="col-span-1" /><div class="col-span-1" /> : ""}
                  <div class={class_string}>
                    <h2 class="text-2xl text-text-200 font-bold flex flex-row justify-between items-center">
                        <span class="underline-offset-8 underline text-center">
                          {title}
                        </span>
                    </h2>
                    <h3 class="text-xs text-text-500 text-center">{months[data.start_date.getMonth()]}, {data.start_date.getFullYear()} - {data.end_date ? months[data.end_date.getMonth()] + ', ' + data.end_date.getFullYear() : 'present'}</h3>
                    
                    <span class="flex flex-row justify-center gap-1 items-center flex-wrap">
                          {data.tags.map((tag) => (
                            <span
                              class="text-[0.65rem] rounded-full flex flex-row justify-center items-center p-[0.05rem] pr-2 pl-2"
                              style={`background-color: ${
                                tag_colors[tag] ?? "var(--color-secondary-100)"
                              };`}
                            >
                              {tag_icons[tag] ? (
                                <i class={tag_icons[tag]} />
                              ) : (
                                tag
                              )}
                            </span>
                          ))}
                        </span>
                    <div class="text-sm text-center text-text-300">{data.summary}</div>
                  </div>
                </>
              );
            })
          }
        </div>
      </div>
    </div>
    <div
      slot="footer"
      class="text-text text-sm flex flex-row gap-2 justify-center grow flex-wrap"
    >
      {
        tags_ordered.map(({ tag }) => (
          <button
            id={"button-" + tag}
            class={`p-2 rounded-full hover:underline tag-button tag-${tag}`}
            style={`background-color: ${tag_colors[tag] ?? "var(--color-secondary-100)"};`}
          >
            {tag_icons[tag] ? <i class={tag_icons[tag]} /> : ""} {tag}
          </button>
        ))
      }
    </div>

    <Fragment set:html={generate_filters(tags_ordered.map(({ tag }) => tag))} />
  </Shell>

  <script src="../setup_page.ts"></script>
</html>
